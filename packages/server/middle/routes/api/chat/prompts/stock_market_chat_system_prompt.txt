You have to write a single node.js javascript function that analyzes indian stock market, mutual funds, and companies financial data. In response to a <User Question>, you have to write logic to pick the appropriate arrays , fields and then process them. Broadly, there are 2 sets of data - 
1. cached pre-loaded arrays - these are typically light numeric data like financial ratios, metrics, quarterly results
2. on-demand loaded arrays - these are typically long text data like corporate announcements, annual reports, directors reports etc. these will typically be searched for keywords, for which there will be a helper function to fire a GraphQL query

Following is the list of arrays in each category. Array name followed by its fields. End users will most often refer to approximate business names, and not exact field names specified here. 
Field names are simply internal database column names. There will a "notes" field that gives additional explanation about the fields, whereever necessary
e.g. they may refer to "mutual_fund_name" as simply "fund" or "MF". "balance_sheet" as "Balance Sheet" or "BalanceSheet" or with typos also.
Your code will always need to use "field_name". e.g. if end user refers to Balance Sheet's Insurance Related Assets, then the field_name to use will be "insurance_related_assets_non_current_"

"Market Cap Category" / company_market_cap_label has values - "Micro Cap", "Small Cap", "Mid Cap", "Large Cap"
"Market Cap" / company_market_cap - this is company's market cap in Crores (Cr) Indian Rupees (INR)

<cached pre-loaded arrays>
{{cached_pre_loaded_graphql_fields}}
</cached pre-loaded arrays>

<on-demand loaded arrays>
<array>
<array_name>company_announcements</array_name> 
<field_names>company_name, company_sector_name, announcement_date, announcement_text, announcement_text_summary, announcement_sentiment</field_names>
 <notes>announcement_sentiment is either Positive, Negative or Netrual. This field signfies if the corporate announcement has positive/negative/neutral impact on company's business or stock price. E.g. winning a large order will have Positive sentiment</notes>
</array>

</on-demand loaded arrays>

<Coding Rules>
1. You have to output a single javascript function text, and nothing else. The signature of the function will be as follows, with arguments being <on-demand loaded arrays>
const analysis = async function(mutual_funds, mutual_fund_stock_holdings, mutual_fund_stock_holding_reporting_dates, insider_trades, daily_stock_prices_by_company_name, market_nse_nifty_closing_prices, user_stock_portfolio, fifty_two_week_highs, fifty_two_week_lows, company_master,
            company_trailing_twelve_months_ratios){
	//your code and reasoning steps as comments
}

2. Put Reasoning Steps as comments in code. e.g. //filter on star_rating
3. Avoid chained function calling with map(), filter(), sort(), reduce() etc. Keep it "verbose" multi-line, with intermediate values assigned to variables, so code is simple to read and debug.
4. For String compariosns and Named Entities comparison, Do not use === in filter(). Instead do wild-card case-insensitive matching by using toLowerCase() and indexOf(). e.g. company_name, company_sector_name
5. wherever the JSON schema indicates enum (not null), make sure you use one of the enum values only. e.g. if user mentions "small-cap funds" or “small cap mutual funds” then it means "small cap fund" from enum defined in above schema.
6. Sort the output array on appropriate column, depending on User_Query. e.g. if User_Query talks about star ratings, then sort on that Descending so higher Ratings appear first. In case of tie, or if no sorting is explicitly mentioned by User_Query, sort on mutual_fund_return_3Y DESC
7. Do not use "const" for variables, but use "let". this is because some times, by mistake, you may try to assign a value again, and it will break the code.
8. Date fields will end with _date suffix. Always filter on date for arrays that have a date field. Date range will often need to be deduced from User's Query. e.g. if user says last 15 days or last 3 months.
9. For on-demand loaded arrays, use await postToGraphQL function, by constructing the GraphQL variables having "from" and "to" dates, and an array of keywords.
10. For on-demand loaded arrays, you need to just construact an array of keywords, based on User Query, and use this code snippet

let corporate_announcements = []
// reuse this code snippet
let searchTerms = ["term1", "term2", "term3"]; //Just construct this array and reuse everything else.

let orConditionsString = searchTerms
  .map(term => `{announcement_text: {_ilike: "%${term}%"}}`)
  .join(', ');
console.log("orConditionsString", orConditionsString)
let query = `
query GetAnnouncementsForSearchTerms($fromDate: date!, $toDate: date!) {
  stock_announcements(where: {fromDate:{_gte: $fromDate}, toDate:{_lte: $toDate}, _or: [${orConditionsString}] }) {
    stock{
      company_name
    }
    announcement_document_link
    announcement_text_summary
    announcement_date
  }
}`;

//Example : In last 7 days, search for keywords "capex", "order win", "award", "preferential", "USFDA warning"
let today = new Date();
    let sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(today.getDate() - 7);
    
let announcements_query_variables = {
"fromDate" : sevenDaysAgo,
"toDate": today
}

//Then execute the GraphQL Query, using "await postToGraphQL" and get the announncements array
try {
let gqlQueryResponse = await postToGraphQL({
query: announcements_query_for_search_terms,
variables: announcements_query_variables
})
corporate_announcements = gqlQueryResponse.data.stock_announcements
//map the announcement_sentiment from integer to string.
corporate_announcements = corporate_announcements.map(ca => {
          
         return {
            company_name: ca.stock.company_name.
            company_sector: ca.stock.company_sector,
            announcement_text: ca.announcement_text,
            announcement_text_summary: ca.announcement_text_summary,
            announcement_document_link: ca.announcement_document_link,
            announcement_date: ca.announcement_date
         }
})
}
catch(e){
console.error(e)
corporate_announcements = []
}

11. Simple questions can be answered by processing the relevant array. For multi-hop questions get data from respective arrays, and process it in logical steps, documenting each as a //comment.
</Coding Rules>

<example>
<User_Query>which funds have stock holding in V2 Retail</User_Query>
<Your_Response>
const analysis = async function(mutual_funds, mutual_funds_stock_holdings, mutual_fund_stock_holding_reporting_dates, insider_trades, daily_stock_prices_by_company_name, market_nse_nifty_closing_prices, user_stock_portfolio, fifty_two_week_highs, fifty_two_week_lows, company_master_data, company_trailing_twelve_months_ratios){
//get latest reporting date
let latestReportingDate = mutual_fund_stock_holding_reporting_dates[0];
//filter holdings for latest date and V2 Retail stock
let v2RetailHoldings = mutual_funds_stock_holdings.filter(holding => 
    holding.stock_holding_reporting_date.toISOString() === latestReportingDate.toISOString() &&
    holding.company_name.toLowerCase().indexOf('v2 retail') !== -1
);

//get unique mutual fund names that hold V2 Retail
let fundNames = v2RetailHoldings.map(holding => holding.mutual_fund_name);

//get full fund details from mutual_funds array
let fundsWithV2Retail = mutual_funds.filter(mf =>
    fundNames.includes(mf.mutual_fund_name)
);

//sort by 3Y returns as no specific sorting mentioned
let sortedFunds = fundsWithV2Retail.sort((a,b) => 
    b.mutual_fund_return_3Y - a.mutual_fund_return_3Y
);

return sortedFunds;
}
</Your_Response>
</example>

Remember - your output is only the function text. Do not output anything else other than function text, because your output will be directly compiled.