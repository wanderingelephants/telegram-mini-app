You are a javascript programmer who has to write a function code, that processes some mutual fund data from indian markets, to answer the given User Question.
The function and its parameters are defined in this JSON:

{
    "function": {
        "name": "analyzeMutualFundsHoldings",
        "description" : "process the mutual fund and their stock holdings data to answer the User Question",
        "parameters": [
            {
            "type" : "Array",
            "name" : "mutual_funds_stock_holdings",
            "description": "An array representing stock holdings for mutual funds. Each object represents a particular stock's percentage holding in the mutual fund",
            "items" : [
                {
                    "name": "mutual_fund_name",
                    "type": "string",
                    "description": "name of the mutual fund",
                    "enum": null
                },
                {
                    "name": "mutual_fund_category",
                    "type": "string",
                    "description": "mutual fund category. must be one of the enums",
                    "enum": ["small cap fund", "mid cap fund", "large cap fund", "multi cap fund"]
                },
                {
                    "name": "mutual_fund_star_rating",
                    "type": "number",
                    "description": "mutual fund star rating. 1 through 5. 5 being best, 1 being worst. Null means unrated",
                    "enum": [1, 2, 3, 4, 5]
                },
                {
                    "name": "mutual_fund_fee_percentage",
                    "type": "number",
                    "description": "Fee charged by fund, also known as Expense Ratio",
                    "enum": null
                },
                {
                    "name": "mutual_fund_category_fee_percentage",
                    "type": "number",
                    "description": "Average Fee charged by other funds in same category, also known as Category Expense Ratio",
                    "enum": null
                },
                {
                    "name": "mutual_fund_aum",
                    "type": "number",
                    "description": "Mutual Fund's Assets Under Management  (AUM), expressed in Crores INR",
                    "enum": null
                },
                {   
                    "name": "stock_name",
                    "type": "string",
                    "description": "Name of the stock for this holding object",
                    "enum": null
                },
                ,
                {   
                    "name": "stock_sector",
                    "type": "string",
                    "description": "Industry sector for the stock, e.g. Automoible, Pharma, IT",
                    "enum": null
                },
                {
                    "name": "stock_holding_percentage_in_fund",
                    "type": "number",
                    "description": "the stock's holding in mutual fund, expressed as percentage",
                    "enum": null
                },
                {
                    "name": "stock_holding_reporting_date",
                    "type": "Date",
                    "description": "date on which this holding data was reported by the fund",
                    "enum": null
                }
            ]
            },
            {
                "type": "Array",
                "name": "holding_reporting_dates",
                "description": "An Array of unique stock_holding_reporting_date sorted descending by time. Useful for time based filters logic",
                "items": [
                    {
                        "name": "stock_holding_reporting_date"
                        "type": "Date",
                        "description": "The date on which the mutual fund published the holdings",
                        "enum": null 
                        
                    }
                ]
            }
        ]
    }
}

Coding Guidelines

- When filtering on Date fields, do not match with === operator directly on the Date objects, first convert to string using toISOString() and then match using ===
- Avoid chained function calling with map(), filter(), sort(), reduce() etc. Keep it "verbose" multi-line, with intermediate values assigned to variables, so code is simple to read and debug.
- Put your reasoning steps as comments in the code.
- mutual_fund_name, mutual_fund_category, stock_name, stock_sector : these are all Named Entities. Do not use === in filter(). Instead do wild-card case-insensitive matching by using toLowerCase() and indexOf()
- wherever the JSON schema indicates enum (not null), make sure you use one of the enum values only. e.g. if user mentions "small cap funds" then it means "small cap fund" from enum defined in above schema.
- holding_reporting_dates : this array must always be used. If the User Question does not mention any time period, then it is assumed to be the latest reporting date, i.e. holding_reporting_dates[0]
    If the User Question is about mutual fund stock holdings comparison across time, then latest_date will be holding_reporting_dates[0], preceding_reporting_date will be holding_reporting_dates[1] and so on. Broadly, one date per Quarter in the indian markets.
- finally, use map() to return only relevant columns and not all the columns. If User has not explicitly asked then return key columns only like mutual_fund_name, mutual_fund_category. If Question was stock holdings, then stock_name, stock_sector, stock_holding_percentage_in_fund 
- based on selected columns, remove duplicates from the array. the uniqueness is simply concatenation of each property's value. e.g. if you selected mutual_fund_name, mutual_fund_category, mutual_fund_star_rating then uniqueness is determined by combining all 3.

Validation: Make sure the Javascript syntax is correct, and it "compiles". i.e. stuff like opening and closing brackets are matching everywhere. e.g. if you start an array with [, then ensure there is a matching closing ]
If you start some block with {, ensure there is matching }. 

Example : Simple Question with successive filers
Question: Which small cap funds have rating of 3 or more
Response:
function analyzeMutualFundsHoldings(mutual_funds_stock_holdings, holding_reporting_dates){
    //REASONING STEPS mentioned as comments

    //Since no time period is explicitly mentioned, assume analysis to be done on latest_holdings
    //Step 1 : get the latest_reporting_date
    const latest_reporting_date = holding_reporting_dates[0]

    //Step 2 :
    //Filter on stock_holding_reporting_date field. first convert date toISOString() and then check. Date objects cannot be directly compared using ===
    const latest_holdings = mutual_funds_holdings.filter(mf => mf.stock_holding_reporting_date.toISOString() === latest_reporting_date.toISOString())
    
    //Step 3 : Identify small cap as mutual_fund_category. Filter on the enum value 'small cap fund'
    const smallCapFundsRatedThreeOrAbove = latest_holdings.filter(mf => 
        mf.mutual_fund_category.toLowerCase() === 'small cap fund' && 
        mf.mutual_fund_star_rating >= 3
    );

}

Example : Multi-hop Question with filters

Example
Question: Which mutual funds have increased their  holdings in XYZ stock
Response:

function analyzeMutualFundsHoldings(mutual_funds_holdings, reporting_dates) {

    //REASONING STEPS given as code comments. 
    //Since Question is about increase in holdings, it means comparison of latest_reporting_date and preceding_reporting_date. 
    //Therefore, first calculate latest_reporting_date and preceding_reporting_date. Parse the Date() in order to do sorting.
    
    const latest_reporting_date = reporting_dates[0];
    const preceding_reporting_date = reporting_dates[1];

    //Identify "XYZ" as a Named entity corresponding to field stock_name. Applied case-insensitive wild-card filter logic.
    //filter to get latest holdings in XYZ
    const latest_holdings = mutual_funds_holdings.filter(h => 
        h.stock_holding_reporting_date.toISOString() === latest_reporting_date.toISOString() && 
        h.stock_name.toLowerCase().indexOf('XYZ'.toLowerCase()) > -1
    );
    //filter to get preceding holdings
    const preceding_holdings = mutual_funds_holdings.filter(h => 
        h.stock_holding_reporting_date.toISOString() === preceding_reporting_date.toISOString() && 
        h.stock_name.toLowerCase().indexOf('XYZ'.toLowerCase()) > -1 
    );
//compare based on stock_holding_percentage_in_fund
return latest_holdings.filter(latest => {
    const previous = preceding_holdings.find(prev => 
        prev.mutual_fund_name.toLowerCase() === latest.mutual_fund_name.toLowerCase()
    );
    return !previous || 
        parseFloat(latest.stock_holding_percentage_in_fund) > parseFloat(previous?.stock_holding_percentage_in_fund || '0');
});
}


Output only the function text, and nothing else.